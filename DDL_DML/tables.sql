CREATE TABLE [User] (
    UserID INT PRIMARY KEY IDENTITY(1,1),
    Username NVARCHAR(50) NOT NULL UNIQUE,
    FullName NVARCHAR(100),
    Email VARCHAR(100) NOT NULL UNIQUE,
    Password VARCHAR(100) NOT NULL,
    Country VARCHAR(100) NULL,
    Phone NUMERIC NULL,
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    isAdmin BIT DEFAULT 0 NOT NULL
);

CREATE TABLE Post (
    PostID INT PRIMARY KEY IDENTITY(1,1),
    AuthorID INT NOT NULL,
    Content VARCHAR(1000) NOT NULL,
    PageID INT NULL,
	CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (AuthorID) REFERENCES [User](UserID),
    --FOREIGN KEY (PageID) REFERENCES Pages(PageID)
	--CONSTRAINT FK_PageID_Post FOREIGN KEY (PageID) REFERENCES Pages(PageID) ON DELETE CASCADE
);

CREATE TABLE Comments (
    CommentID INT PRIMARY KEY IDENTITY(1,1),
    PostID INT NOT NULL,
    UserID INT NOT NULL,
    Content VARCHAR(1000) NOT NULL,
	CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostID) REFERENCES Post(PostID),
    FOREIGN KEY (UserID) REFERENCES [User](UserID)
);

CREATE TABLE Share (
    ShareID INT PRIMARY KEY IDENTITY(1,1),
    PostID INT NOT NULL,
    UserID INT NOT NULL,
    Shared_Platform VARCHAR(100) NULL,
    FOREIGN KEY (PostID) REFERENCES Post(PostID),
    FOREIGN KEY (UserID) REFERENCES [User](UserID)
);


CREATE TABLE Likes (
    LikeID INT PRIMARY KEY IDENTITY(1,1),
    PostID INT NOT NULL,
    UserID INT NOT NULL,
	CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostID) REFERENCES Post(PostID),
    FOREIGN KEY (UserID) REFERENCES [User](UserID)
);

CREATE TABLE Friendships (
    FriendshipID INT PRIMARY KEY IDENTITY(1,1),
    UserID1 INT NOT NULL,
    UserID2 INT NOT NULL,
    Status NVARCHAR(20) NOT NULL DEFAULT 'Pending' CHECK (Status IN ('Pending', 'Accepted', 'Rejected')),
    FOREIGN KEY (UserID1) REFERENCES [Users](UserID) ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (UserID2) REFERENCES [Users](UserID) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE Notifications (
    NotificationID INT PRIMARY KEY IDENTITY(1,1),
    UserID INT,
    Content VARCHAR(1000) NOT NULL,
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_UserID_Notifications FOREIGN KEY (UserID) REFERENCES [User](UserID)
);

CREATE TABLE Chats (
    ChatID INT PRIMARY KEY IDENTITY(1,1),
    User1ID INT NOT NULL,
    User2ID INT NOT NULL,
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (User1ID) REFERENCES [Users](UserID) ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (User2ID) REFERENCES [Users](UserID) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE Messages (
    MessageID INT PRIMARY KEY IDENTITY(1,1),
    ChatID INT NOT NULL,
    SenderID INT NOT NULL,
    Content VARCHAR(1000) NOT NULL,
    Timestamp DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ChatID) REFERENCES Chats(ChatID) ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (SenderID) REFERENCES [Users](UserID) ON DELETE NO ACTION ON UPDATE NO ACTION
);


--Remaining
-- CREATE TABLE Pages (
--     PageID VARCHAR(50) PRIMARY KEY,
--     AdminID VARCHAR(50) FOREIGN KEY REFERENCES [User](UserID),
--     Rules VARCHAR(1000),
--     Email VARCHAR(100),
--     Bio VARCHAR(1000),
--     Country VARCHAR(100),
--     Phone NUMERIC
-- );

-- CREATE TABLE PageMembers (
--     MemberID INT PRIMARY KEY IDENTITY(1,1),
--     PageID VARCHAR(50) FOREIGN KEY REFERENCES Pages(PageID),
--     UserID VARCHAR(50) FOREIGN KEY REFERENCES [User](UserID),
--     Content VARCHAR(1000)
-- );


--events
ALTER TABLE Events
ADD EventCategoryID INT Unique;

ALTER TABLE Events
ADD FOREIGN KEY (EventCategoryID) REFERENCES EventCategories(EventCategoryID);


CREATE TABLE EventCategories (
    EventCategoryID INT PRIMARY KEY IDENTITY(1,1),
    CategoryName NVARCHAR(255) NOT NULL UNIQUE
);
